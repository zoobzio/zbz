services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dev

  metabase:
    image: metabase/metabase
    container_name: metabase
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${POSTGRES_DB}
      MB_DB_PORT: ${POSTGRES_PORT}
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_HOST: ${POSTGRES_HOST}
      MB_SETUP_ADMIN_EMAIL: ${METABASE_ADMIN_EMAIL}
      MB_SETUP_ADMIN_PASSWORD: ${METABASE_ADMIN_PASSWORD}
      MB_SETUP_ADMIN_FIRST_NAME: ${METABASE_ADMIN_FIRST_NAME}
      MB_SETUP_ADMIN_LAST_NAME: ${METABASE_ADMIN_LAST_NAME}
      MB_SETUP_TOKEN: ${METABASE_SETUP_TOKEN}
      MB_JETTY_PORT: 2222
    ports:
      - "2222:2222"
    networks:
      - dev
    depends_on:
      - db

  tempo:
    image: grafana/tempo:2.5.0
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    ports:
      - "3200:3200" # Tempo HTTP API
    networks:
      - dev

  otel:
    image: otel/opentelemetry-collector-contrib:0.128.0
    container_name: otel
    command: ["--config=/etc/otel.yaml"]
    volumes:
      - ./otel.yaml:/etc/otel.yaml
    ports:
      - "55679:55679" # OTLP live diagnostics
      - "13133:13133" # OTLP Health check
      - "1777:1777" # OTL performance profiling
    depends_on:
      - tempo
      - loki
    networks:
      - dev

  grafana:
    image: grafana/grafana:10.2.4
    container_name: grafana
    environment:
      GF_SERVER_HTTP_PORT: 3333
    ports:
      - "3333:3333"
    networks:
      - dev

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dev

  # MinIO S3-compatible storage for local development
  minio:
    image: minio/minio:latest
    container_name: zbz-minio
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - dev

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - dev

  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    volumes:
      - ./promtail.yaml:/etc/promtail/promtail.yaml
      - ./.logs:/logs
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      - api
      - loki
    networks:
      - dev

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    networks:
      - dev

  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: api
    volumes:
      - .:/app
      - api-data:/tmp
    environment:
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
      API_TITLE: ${API_TITLE}
      API_VERSION: ${API_VERSION}
      API_DESCRIPTION: ${API_DESCRIPTION}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_CALLBACK_URL: ${AUTH0_CALLBACK_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      REDIS_URL: redis://redis:6379
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    networks:
      - dev

volumes:
  postgres-data:
  redis-data:
  minio-data:
  tempo-data:
  api-data:

networks:
  dev:
    driver: bridge
